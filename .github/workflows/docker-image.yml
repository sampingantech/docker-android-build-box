name: Docker Image CI

on:
  workflow_dispatch:  # manual trigger
  schedule:
      # ┌───────────── minute (0 - 59)
      # │ ┌───────────── hour (0 - 23)
      # │ │ ┌───────────── day of the month (1 - 31)
      # │ │ │ ┌───────────── month (1 - 12 or JAN-DEC)
      # │ │ │ │ ┌───────────── day of the week (0 - 6 or SUN-SAT)
      # │ │ │ │ │
      # │ │ │ │ │
      # │ │ │ │ │
      # * * * * *
    - cron: '0 0 * * 1'  # build every Monday
  push:
    branches: [ main, dev ]
    tags:
      - '*.*.*'
    paths-ignore:
      - '*.md'
      - 'howto.txt'
      - 'LICENSE'
  pull_request:
    branches: [ main ]


jobs:

  build:

    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: public.ecr.aws/r4f2m1l8/android

    steps:
    - uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81
      with:
        images: public.ecr.aws/r4f2m1l8/android
        labels: |
          org.opencontainers.image.url=https://gallery.ecr.aws/r4f2m1l8/android
          org.opencontainers.image.vendor=Sampingan Tech

    - name: Set up QEMU
      uses: docker/setup-qemu-action@68827325e0b33c7199eb31dd4e31fbe9023e06e3
      with:
        platforms: amd64,arm64

    - name: Available platforms
      run: echo ${{ steps.qemu.outputs.platforms }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb
      with:
        driver: docker

    - name: Pre build
      run: |
        # possible ref examples:
        #   refs/pull/138/merge
        #   refs/heads/master
        #   refs/tags/1.25.0
        echo "GITHUB_REF: $GITHUB_REF"

        # possible event name examples:
        #   push
        #   pull_request
        echo "GITHUB_EVENT_NAME: $GITHUB_EVENT_NAME"
        echo "GITHUB_EVENT_PATH: $GITHUB_EVENT_PATH"
        echo "GITHUB_WORKFLOW: $GITHUB_WORKFLOW"
        echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
        echo "GITHUB_HEAD_REF: $GITHUB_HEAD_REF"
        echo "GITHUB_ACTION: $GITHUB_ACTION"
        echo "GITHUB_JOB: $GITHUB_JOB"

        uname -a
        df -h
        docker images
        docker ps -a
        echo "GITHUB_SHA: $GITHUB_SHA"

        # Set up env.TAG
        echo "TAG=$GITHUB_SHA" >> $GITHUB_ENV
        echo "TAG: $TAG"

        # Remove exist images to free disk space
        docker rmi $(docker image ls -a | grep -vE 'ubuntu.*22\.04|moby/buildkit' | awk 'NR>1 {print $3}')
        #docker rmi $(docker images | grep -v IMAGE | awk '{print $3}')
        docker images

        # Remove unneeded and installed software to free up space
        sudo rm -rf /usr/local/lib/android/sdk
        sudo rm -rf /opt/hostedtoolcache

        # check disk space one more time
        df -h

    - name: Build and load local docker image for PRs or Not Tags
      uses: docker/build-push-action@2cdde995de11925a030ce8070c3d77a52ffcf1c0
      if: github.event_name == 'pull_request' || !startsWith(github.ref, 'refs/tags/')
      with:
        context: .
        load: true
        tags: ${{ env.IMAGE_NAME}}:${{ env.TAG}}

    - name: Build and load local docker image for Not PRs and Tags
      uses: docker/build-push-action@2cdde995de11925a030ce8070c3d77a52ffcf1c0
      if: github.event_name != 'pull_request' && startsWith(github.ref, 'refs/tags/')
      with:
        context: .
        load: true
        tags: ${{ env.IMAGE_NAME}}:${{ env.TAG}}
        build-args: |
          ANDROID_SDK_TOOLS_TAGGED=tagged
          ANDROID_SDKS=tagged
          NDK_TAGGED=tagged
          NODE_TAGGED=tagged
          BUNDLETOOL_TAGGED=tagged
          FLUTTER_TAGGED=tagged
          JENV_TAGGED=tagged

    - name: Inspect local docker image
      run: |
        docker images
        docker inspect ${{ env.IMAGE_NAME}}:${{ env.TAG}}

    - name: Test
      run: |
        docker run --rm ${{ env.IMAGE_NAME}}:${{ env.TAG}} env
        docker run --rm ${{ env.IMAGE_NAME}}:${{ env.TAG}} flutter --version

        echo "Show current java version"
        docker run --rm ${{ env.IMAGE_NAME}}:${{ env.TAG}} java -version

        echo "Set java env to 8"
        docker run --rm ${{ env.IMAGE_NAME}}:${{ env.TAG}} bash -c '. $HOME/.bash_profile && jenv local 1.8 && java -version'

        echo "Test jenv recognizes Java 11"
        docker run --rm ${{ env.IMAGE_NAME}}:${{ env.TAG}} bash -c 'jenv local 11 && java -version'

        echo "Test jenv recognizes Java 17"
        docker run --rm ${{ env.IMAGE_NAME}}:${{ env.TAG}} bash -c 'jenv local 17 && java -version'

        docker run -v `pwd`:/project --rm $IMAGE_NAME:$TAG bash -c 'echo "Current directory: $PWD"'
        docker run -v `pwd`:/project --rm ${{ env.IMAGE_NAME}}:${{ env.TAG}} bash -c 'echo "Current directory: $PWD"'

        docker run --rm ${{ env.IMAGE_NAME}}:${{ env.TAG}} bash -c 'ls -l $ANDROID_SDK_HOME'
        docker run --rm ${{ env.IMAGE_NAME}}:${{ env.TAG}} bash -c 'ls -l $ANDROID_NDK_HOME'
        docker run --rm ${{ env.IMAGE_NAME}}:${{ env.TAG}} bash -c 'ls -l /opt/android-sdk/ndk/'

        # Test Node
        echo "Test Node installation"
        docker run --rm ${{ env.IMAGE_NAME}}:${{ env.TAG}} bash -c 'curl -fsSL https://deb.nodesource.com/test | bash -'

        cd test_projects/SampleProject/
        docker run --rm -v `pwd`:/project ${{ env.IMAGE_NAME}}:${{ env.TAG}} bash -c './gradlew build'

    # - name: Login to DockerHub
    #   # if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    #   if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || contains(github.ref, 'refs/tags/'))
    #   uses: docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20
    #   with:
    #     username: ${{ secrets.DOCKERHUB_USERNAME }}
    #     password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || contains(github.ref, 'refs/tags/'))
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-1

    - name: Login to Amazon ECR
      if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || contains(github.ref, 'refs/tags/'))
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # - name: Build, tag, and push image to Amazon ECR
    #   if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || contains(github.ref, 'refs/tags/'))
    #   env:
    #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
    #     ECR_REPOSITORY: android
    #     IMAGE_TAG: android:latest
    #   run: |
    #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
    #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: .
        # Android SDK not support arm64 yet
        # platforms: linux/amd64,linux/arm64
        platforms: linux/amd64
        # platforms: linux/arm64
        # push: ${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/main' }}
        push: ${{ github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || contains(github.ref, 'refs/tags/')) }}
        tags: public.ecr.aws/r4f2m1l8/android:latest,${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

- name: Build and push - for Not PRs and Not Tags
      uses: docker/build-push-action@2cdde995de11925a030ce8070c3d77a52ffcf1c0
      if: github.event_name != 'pull_request' && !startsWith(github.ref, 'refs/tags/')
      with:
        context: .
        platforms: linux/amd64
        push: ${{ startsWith(github.ref, 'refs/heads/main') }}
        tags: mingc/android-build-box:latest, ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Build and push - for Not PRs and Tags
      uses: docker/build-push-action@2cdde995de11925a030ce8070c3d77a52ffcf1c0
      if: github.event_name != 'pull_request' && startsWith(github.ref, 'refs/tags/')
      with:
        context: .
        platforms: linux/amd64
        push: ${{ startsWith(github.ref, 'refs/tags/') }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          ANDROID_SDK_TOOLS_TAGGED=tagged
          ANDROID_SDKS=tagged
          NDK_TAGGED=tagged
          NODE_TAGGED=tagged
          BUNDLETOOL_TAGGED=tagged
          FLUTTER_TAGGED=tagged
          JENV_TAGGED=tagged

    - name: Modify Readme to list latest software
      if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/master')
      run: |
        printf "\n\n \"Latest\" Tag Software:\n\n" >> README.md
        TEMP=$(docker run --rm ${{ env.IMAGE_NAME}}:${{ env.TAG}} cat '/root/installed-versions.txt')
        echo "$TEMP" | tail --lines=+2 >> README.md

    - name: Update Docker Hub Description
      if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/master')
      uses: peter-evans/dockerhub-description@e98e4d1628a5f3be2be7c231e50981aee98723ae
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        repository: mingc/android-build-box
        enable-url-completion: true
